function [y1] = myNeuralNetworkFunction1(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 22-Jan-2023 19:32:33.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.6;576.2];
x1_step1.gain = [0.00638162093171666;0.00163185378590078];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.3037239036134375958;0.74461840537840207066;-0.92899208732163296443;-1.3729112856413461241;-6.6525115277057009777;-1.072648089933060378;-21.005685159968319198;-1.0712641968894833777;2.4714559025997080433;3.4170831147900448954];
IW1_1 = [2.7044952814547662534 2.9439902023171833356;-0.70626610671529699292 -0.068110518041728809746;1.1430227167487974071 -0.326859542085415955;9.2287259438022406499 0.010313757530323069966;9.0493547201976447525 -38.6624432917183114;7.7571126169901294389 -6.3244830203812218983;-11.227610179688616299 -23.961005881655541572;-1.1267796870005772902 0.23325110026630974103;1.8717145271856157063 -2.0166505155710234831;3.5333042395420495296 -0.56894455889238737534];

% Layer 2
b2 = [0.32177195154388810172;-2.4538359449693762926];
LW2_1 = [-0.083023702021166045917 -1.6896903276403651972 -0.23542358248663550202 0.0095898049277718545175 -0.034607598232025423013 0.01308083944046868792 0.0013321446076789468255 -0.75057694885520642725 -0.058092990016062530378 0.021127814832071278167;-0.23426114486195387387 2.8082012942485410356 1.3328794184129983957 -0.055708814800587355687 -0.30867129048544694747 -0.10349312768549480401 0.14581253273201197351 -3.5256596241675350889 -0.36602597264927561049 -0.44039851771159832516];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.00101988781234064;0.00112739571589628];
y1_step1.xoffset = [-176.7;0];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
